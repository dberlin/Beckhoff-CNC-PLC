<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.16">
  <POU Name="VacuumHandler" Id="{e330dade-d106-4261-bfca-cbe558d8595b}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM VacuumHandler
VAR
	// Turn on vacuum signal from PC
	iPCVacuumOn AT %I* : BOOL;
	// Vacuum Control Output
	oVacuumControl AT %Q* : ST_ATV71CommandWord;	
	// Vacuum Pressure requested from VFD - in tenths of a psi from 0 to 1450
	oVacuumPressureRequested AT %Q* : UINT;
	// Vacuum Pressure good output to PC Pin 7
	oPCVacuumPressureGood AT %Q*: BOOL;
	{region "Input Debouncers"}
	(* The 5V input has a ridiculously fast time - a few nanoseconds.
	   Therefore, we debounce it *)
	VacuumOnDebounced : TON;
	{endregion}
		 
	{region "Input Vacuum Data"}
	iStatusWord AT %I* : UINT;
	{attribute 'BaseUnit' := '<RPM, 1, 0, 0>'}
	iOutputVelocity AT %I* : UINT;
	iAnalogInput2ScaledValue AT %I* : UINT;
	{attribute 'UserUnit' := '<Pressure, PSI, PSI, 6894.7572932, 0, centi>'}
	iPIDRegulatorFeedback AT %I* : UINT;
	iPIDRegulatorOutput AT %I* : UINT;
	{attribute 'BaseUnit' := '<Frequency, 0.1, 0, 0>'}
	iOutputFrequency AT %I* : UINT;
	{endregion}
	oMotorFrequency AT %Q* : UINT;
	PidOptimizer : FB_OptimizePID;
END_VAR

VAR CONSTANT
	// Minimum PSI at which vacuum holding is viable for workpiece
	GoodVacuumPressure : REAL := 10.0;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
VacuumOnDebounced(IN := iPCVacuumOn, PT := T#3MS);
// Vacuum control	
	(* // This is for CIP
	
	oVacuumControl.RunFwd := VacuumOnDebounced.Q;
	oVacuumControl.RunReverse := FALSE;
	oVacuumControl.NetCtrl := TRUE;
	oVacuumControl.NetRef := FALSE; *)
	// This is for ATV71 
	oVacuumControl.Forward := VacuumOnDebounced.Q;
	oVacuumControl.Reverse := FALSE;
	oVacuumControl.PidIntegralOff := FALSE;
	oVacuumPressureRequested := 1400;
	oPCVacuumPressureGood := iPIDRegulatorFeedback >= (GoodVacuumPressure * 100);
	
	(* PID optimization
	IF VacuumOnDebounced.Q THEN
		IF NOT PidOptimizer.TuningDone THEN
			PidOptimizer(Enable := TRUE,
						 ProcessSetpoint := 2500,
						 ProcessValue := iAnalogInput2ScaledValue,
						 NumCycles := 10,
						 Reset := FALSE,
						 ControlLowVal := 5,
						 ControlHighVal := 60,
						 PIDType := E_PIDOptimizationType.FastRamp);
			oMotorFrequency := TO_UINT(PidOptimizer.ControlValue*10);
			IF PidOptimizer.TuningDone THEN
				ADSLOGLREAL(TC2_Utilities.ADSLOG_MSGTYPE_LOG, 'Kp value is %f', PidOptimizer.Kp);
				ADSLOGLREAL(TC2_Utilities.ADSLOG_MSGTYPE_LOG, 'Ki value is %f', PidOptimizer.Ki);
				ADSLOGLREAL(TC2_Utilities.ADSLOG_MSGTYPE_LOG, 'Kd value is %f', PidOptimizer.Kd);
				ADSLOGLREAL(TC2_Utilities.ADSLOG_MSGTYPE_LOG, 'Ku value is %f', PidOptimizer.Ku);
				ADSLOGLREAL(TC2_Utilities.ADSLOG_MSGTYPE_LOG, 'Tu value is %f', PidOptimizer.Tu);
			END_IF
		END_IF
	END_IF
	*)]]></ST>
    </Implementation>
    <LineIds Name="VacuumHandler">
      <LineId Id="22" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="24" Count="12" />
      <LineId Id="259" Count="0" />
      <LineId Id="257" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="117" Count="1" />
      <LineId Id="120" Count="0" />
      <LineId Id="122" Count="4" />
      <LineId Id="128" Count="1" />
      <LineId Id="119" Count="0" />
      <LineId Id="171" Count="1" />
      <LineId Id="169" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="219" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="258" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>