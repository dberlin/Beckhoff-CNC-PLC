<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="MAIN" Id="{cd64af0a-d51b-49f0-91ce-918439305f15}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	{region "Servo handling variables"}
	// Alarm inputs from Servos
  	XAxisAlarm AT %I*:BOOL := TRUE;
  	YAxisAlarm AT %I*:BOOL := TRUE;
  	ZAxisAlarm AT %I*:BOOL := TRUE;
  	AAxisAlarm AT %I*:BOOL := TRUE;
  	// Alarm Output to PC pin 8
  	PCServoAlarm AT %Q*:BOOL;
  	// Whether servo thinks Z Axis break should be off
  	ZAxisBrakeOff AT %I*:BOOL;
	// Relay output controlling Z Axis Brake
	ZAxisBrakeRelay AT %Q*: BOOL;
    {endregion}
	{region "Probe, Air Pressure, Coolant, Vacuum"}
	// Digital Probe Trigger output to PC pin 29
	PCProbeOutput AT %Q*: BOOL;
	// Digital Probe Input (Normally Closed)
	ProbeInput AT %I*: BOOL := TRUE;
	// Air Pressure >90psi signal to PC pin 10
	PCPressureOutput AT %Q*: BOOL;
	// Air Pressure >90psi signal from sensor.  The sensor triggers as pressure is rising past 90psi
	PressureSensorInput AT %I*: BOOL;
	// Control of NITRA Valves over ethernet/ip	 
	ValveControl AT %Q* : NitraValves; 
	// Turn on coolant signal from PC
	PCCoolantOn AT %I* : BOOL;
	// Turn on vacuum signal from PC
	PCVacuumOn AT %I* : BOOL;
	// Vacuum Control Output
	VacuumControl AT %Q* : CIPExtendedSpeedOut;
	// Vacuum Pressure good output to PC Pin 7
	PCVacuumPressureGood AT %Q*: BOOL;
	{endregion}
	{region "Spindle variables"}
	// True if spindle is at less than 1 RPM
	SpindleStopped : BOOL;
	// Spindle stopped output to PC pin 1
	PCSpindleStopped AT %Q* : BOOL;
	// Turn spindle on input from PC
	PCSpindleOn AT %I* : BOOL;
	// Spindle within 5% of speed to PC Pin 28
	PCSpindleSpeedOK AT %Q* : BOOL;
	// Spindle speed from VFD
	VFDCurrentSpindleSpeed : UINT;
	{endregion}
	Test : TP;
	TestOn : BOOL := FALSE;
	TestValue AT %Q* : UDINT := 0;
	TestTrig : F_Trig;
END_VAR

VAR CONSTANT
	// Minimum PSI at which vacuum holding is viable for workpiece
	GoodVacuumPressure: REAL := 10.0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[{region "Servo handling"}
PCServoAlarm := XAxisAlarm AND YAxisAlarm AND ZAxisAlarm AND AAxisAlarm;
ZAxisBrakeRelay := ZAxisBrakeOff;
{endregion}
{region "Probe, Air Pressure, Coolant, Vacuum"}
PCProbeOutput := NOT ProbeInput;
PCPressureOutput := PressureSensorInput;
ValveControl.Coolant := PCCoolantOn;
VacuumControl.RunFwd := PCVacuumOn;
VacuumControl.RunReverse := FALSE;
VacuumControl.NetCtrl := TRUE;
VacuumControl.NetRef := TRUE;
	
PCVacuumPressureGood := VacuumPressureGetter.VacuumPressure >= GoodVacuumPressure;
	 		
{endregion}
{region "Spindle handling"}
// Spindle is stopped if it is under 1RPM
SpindleStopped := SpindleSpeedCalculator.SpindleSpeed <= 1.0;
PCSpindleStopped := SpindleStopped;
// If spindle is on, calculate whether it is up to speed.
IF PCSpindleOn THEN
	PCSpindleSpeedOK := SpindleSpeedCalculator.SpindleSpeed  >= (0.95 * TO_REAL(VFDCurrentSpindleSpeed));
END_IF
{endregion}
Test(IN := TestOn, PT := T#3.5MS);
IF NOT TestOn THEN
	TestOn := TRUE;
END_IF
TestTrig(CLK := Test.Q);
IF NOT Test.Q THEN
	TestValue := TestValue + 1;
END_IF
IF TestTrig.Q THEN
	TestOn := FALSE;
END_IF
]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="571" Count="11" />
      <LineId Id="596" Count="23" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>