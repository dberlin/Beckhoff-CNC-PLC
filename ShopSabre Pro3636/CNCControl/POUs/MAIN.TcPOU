<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.16">
  <POU Name="MAIN" Id="{cd64af0a-d51b-49f0-91ce-918439305f15}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR
	{region "Servo handling variables"}
	// Alarm inputs from Servos
  	iXAxisAlarm AT %I*:BOOL;
  	iYAxisAlarm AT %I*:BOOL;
  	iZAxisAlarm AT %I*:BOOL;
  	iAAxisAlarm AT %I*:BOOL;
  	// Alarm Output to PC pin 8
  	oPCServoAlarm AT %Q*:BOOL;
  	// Whether servo thinks Z Axis break should be off
  	iZAxisBrakeOff AT %I*:BOOL;
	// Relay output controlling Z Axis Brake
	oZAxisBrakeRelay AT %Q*: BOOL;
    {endregion}
	{region "Probe, Air Pressure, Coolant"}
	// Digital Probe Trigger output to PC pin 29
	oPCProbe AT %Q*: BOOL;
	// Digital Probe Input (Normally Closed)
	iProbe AT %I*: BOOL := TRUE;
	// Air Pressure >90psi signal to PC pin 10
	oPCAirPressure AT %Q*: BOOL;
	// Air Pressure >90psi signal from sensor.  The sensor triggers as pressure is rising past 90psi
	iAirPressureSensor AT %I*: BOOL;
	// Control of NITRA Valves over ethernet/ip	 
	oValveControl AT %Q* : NitraValves; 
	// Turn on coolant signal from PC
	iPCCoolantOn AT %I* : BOOL;
	{endregion}
	{region "Spindle variables"}
	{region "Spindle Speed Handling"}
	// True if spindle is at less than 1 RPM
	SpindleStopped : BOOL;
	// Spindle stopped output to PC pin 1
	oPCSpindleStopped AT %Q* : BOOL;
	// Spindle within 5% of speed to PC Pin 28
	oPCSpindleSpeedOK AT %Q* : BOOL;
	{endregion}
	{region "Spindle Tool Change handling"}
	// Tool Release Button on Spindle
	iSpindleToolReleaseButton AT %I*: BOOL;
	// Tool Release from PC Pin 24
	iPCToolRelease AT %I*: BOOL;
	// Tool Presence to PC Pin 2
	oPCToolPresence AT %Q* : BOOL;
	// S1 Tool Presence sensor from the spindle
	iS1ToolPresence AT %I* : BOOL;
	// Collet Open to PC Pin 9
	oPCColletOpen AT %Q* : BOOL;
	// S2 Collet Open sensor from the spindle
	iS2ColletOpen AT %I* : BOOL;	 
	// Spindle over temperature to PC Pin 27
	oPCSpindleOverTemp AT %Q* : BOOL;
	// Spindle over temperature relay
	iSpindleOverTemp AT %I* : BOOL;
	// Turn spindle on input from PC
	iPCSpindleOn AT %I* : BOOL;
	SpindleController : SpindleCIA402Velocity;
	{endregion}
	{endregion}
	{region "Input Debouncers"}
	(* The 5V input has a ridiculously fast time - a few nanoseconds.
	   Therefore, we debounce it *)
	CoolantOnDebounced : TON;
	SpindleOnDebounced : TON;
	ToolReleaseDebounced : TON;	
	{endregion}
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CoolantOnDebounced(IN := iPCCoolantOn, PT := T#3MS);
SpindleOnDebounced(IN := iPCSpindleOn, PT := T#3MS);
ToolReleaseDebounced(IN := iPCToolRelease, PT := T#3MS);

{region "Servo handling"}
// Servo Alarm
	// The servo alarm inputs are normally closed
	oPCServoAlarm := NOT (iXAxisAlarm AND_THEN iYAxisAlarm AND_THEN iZAxisAlarm AND_THEN iAAxisAlarm);

// Servo Brake	 
	oZAxisBrakeRelay := iZAxisBrakeOff;
{endregion}

{region "Probe, Air Pressure, Coolant, Vacuum"}
// Probe control
	oPCProbe := NOT iProbe;

// Pressure Control
	oPCAirPressure := iAirPressureSensor;

// Colant control
	oValveControl.Coolant := CoolantOnDebounced.Q;


{endregion}
{region "Spindle handling"}
// Spindle Speed Handling
	// Spindle is stopped if it is under 1RPM
	SpindleStopped := SpindleSpeedCalculator.SpindleSpeed <= 1.0;
	oPCSpindleStopped := SpindleStopped;
	// Calculate whether spindle is up to speed.  We will only say it is up to speed if it is on.
	oPCSpindleSpeedOK := SpindleOnDebounced.Q AND_THEN (SpindleSpeedCalculator.SpindleSpeed  >= (0.95 * TO_REAL(DemandedSpeedTask.DemandedSpeed)));

// Spindle control handling
	 // NOTE: HSK-F63 spindles may not be spun while the tool is not present
	 IF NOT (SpindleOnDebounced.Q AND iS1ToolPresence) THEN
	 	SpindleController.SetSpeed(0);
		SpindleController.Stop();
	 ELSIF SpindleOnDebounced.Q AND iS1ToolPresence THEN	  
	 	SpindleController.SetSpeed(DemandedSpeedTask.DemandedSpeed);
		SpindleController.Run();
	 END_IF
		  
// Spindle Tool Change handling
	oPCToolPresence := iS1ToolPresence;
	oPCColletOpen := iS2ColletOpen;
	oPCSpindleOverTemp := iSpindleOverTemp;
	oValveControl.ToolRelease := (iAirPressureSensor AND_THEN SpindleStopped) AND_THEN (ToolReleaseDebounced.Q OR iSpindleToolReleaseButton); 		  

{endregion}		  
{endregion}]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="5100" Count="1" />
      <LineId Id="5103" Count="20" />
      <LineId Id="5130" Count="10" />
      <LineId Id="5142" Count="2" />
      <LineId Id="5297" Count="0" />
      <LineId Id="5145" Count="1" />
      <LineId Id="5298" Count="0" />
      <LineId Id="5149" Count="0" />
      <LineId Id="5299" Count="0" />
      <LineId Id="5151" Count="6" />
      <LineId Id="3416" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>